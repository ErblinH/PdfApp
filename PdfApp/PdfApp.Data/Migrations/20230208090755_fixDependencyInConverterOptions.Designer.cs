// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PdfApp.Data;

#nullable disable

namespace PdfApp.Data.Migrations
{
    [DbContext(typeof(PdfAppDbContext))]
    [Migration("20230208090755_fixDependencyInConverterOptions")]
    partial class fixDependencyInConverterOptions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PdfApp.Domain.Entities.ConvertJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConverterOptionsId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("HtmlInput")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Name")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConverterOptionsId");

                    b.ToTable("ConvertJob");
                });

            modelBuilder.Entity("PdfApp.Domain.Entities.ConverterMargins", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Bottom")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Left")
                        .HasColumnType("int");

                    b.Property<int>("Right")
                        .HasColumnType("int");

                    b.Property<int>("Top")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ConverterMargins");
                });

            modelBuilder.Entity("PdfApp.Domain.Entities.ConverterOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConverterMarginsId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PageColorMode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageOrientation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PagePaperSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConverterMarginsId");

                    b.ToTable("ConverterOptions");
                });

            modelBuilder.Entity("PdfApp.Domain.Entities.ConvertJob", b =>
                {
                    b.HasOne("PdfApp.Domain.Entities.ConverterOptions", "ConverterOptions")
                        .WithMany("ConvertJob")
                        .HasForeignKey("ConverterOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConverterOptions");
                });

            modelBuilder.Entity("PdfApp.Domain.Entities.ConverterOptions", b =>
                {
                    b.HasOne("PdfApp.Domain.Entities.ConverterMargins", "ConverterMargins")
                        .WithMany("ConverterOptions")
                        .HasForeignKey("ConverterMarginsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConverterMargins");
                });

            modelBuilder.Entity("PdfApp.Domain.Entities.ConverterMargins", b =>
                {
                    b.Navigation("ConverterOptions");
                });

            modelBuilder.Entity("PdfApp.Domain.Entities.ConverterOptions", b =>
                {
                    b.Navigation("ConvertJob");
                });
#pragma warning restore 612, 618
        }
    }
}
